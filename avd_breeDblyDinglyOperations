/*
Created by :
Aerovition Digital Inc.,An Aerovition Company
International Copyright law @2016.
Date: 7/8/2016
Author: Shaw Rahman

Research Domain: 
1. Applied Artificial Intelligence, 
2. Machime Learning.
3. Two tree SVM
4. supervised learning
5. Model Driven system Of systems MDA_LSSI_SOS
6. Recommendations systems in BigData

Wriiten in Angula Js (MEAN)/ any JS is ('use strict')applicable.
Prototype Resftul API Gateway Interface(RAGI),Multi Channel Gateway 
Interface (MCGI),  55 Data Structure (GSDB), Applied Artificial 
Intelligencce (AAAI) 


PREAMBLE:
-----------------------------------------------------------------------------------------
The following object oriented callback,"overloads 
as OO function any data structure as domain onjects" 
[for applications of graph theory or , (Any)Tree(s)], 
and provides a learner, in supervised learning, a mechanism,
to "classfy", using  algorithms(options:Machine Learning:Classfication;
Support Vector Machine, SNM), to build  Restful API / Callback or to apply RestfulAPI in 
A Recommnedation system, in BigData.

Prerequisite:
Business Transformation
________________________________________________________________________________________
 
-------------------------------------------------------------------------------------------

International Copyright law @2016.
Work Protected under International Copy Right Law, 2016, PCI & Digital Media Law; 
Prototype & Data Structure disclosed, via adoption of measurable efforts, by 
intellectual property Owner, thru code Release; see, http://www.dmlp.org/legal-
guide/works-not-covered-copyright 
Projects: KotoTaka©, WebDaktar©, Ki Kotha©, Rokkha©, Halker© [AeroStore©]

--------------------------------------------------------------------------------------------

var Node(
    previosu;
    next;
    data;
);
Node node()(
    this.previous =null;
    this.next= null;
    this.data =[];
};
DList var(
    head;
    tail;
    lenght;);

DList DList(){
    this.head =nul;
    this.tail=null;
    this.lenght=0;
};
//var Node nodeObjectFunction = node_object_collections(Node, SinglyList, Dlist, callback)[{
//insert
//current node is always the node to deal with.
Node insertNode = insert_begin_function(Node currentNode){
//insert at the begining:
    DList.head.previous = currentNode.next;
    currentNode.previous = null;
    Dlist.this.length = ++Dlist.this.length;
    return currentNode;
};
//insert at the end:
Node insertNode = insert_end_function(Node currentNode){
    DList.tail.next = currentNode.previous;
    currentNode.previous = Dlist.tail.head;
    Dlist.this.length = ++Dlist.this.length;
    return currentNode;
};
//insert in the middle:
Node insertNode = insert_middle_function(Node currentNode){
    var position;
    if (Dlist.this.length > position) //position insert found;I beleve it
    {
        Dlist.head.next = currentNode.previous;
        Dlist.tail.previous = currentNode.next;
        var position_found = position;
        console.log("display" + DList.currentNode.data);
    }
    return currentNode;
}
Node searchNode = search_position_function(Node currentNode)  {
//position locatiion:
var position;
    if (Dlist.this.length > position){
        var position_searched_found = position;
        Dlist.length =  position_searched_found; //stop at this posiotn;
        Dlist.head.next = currentNode.previous;
        currentNode.next= Dlist.tail.head;
        console.log("display" + DList.currentNode.data);
}
},
Node toDeleteNode = delete_node_function(Node currentNode){ 
// if a reference node is passed or 
//delete 11 th note positon = 10(str at 0)
//delete in the middle:

var position;
    if (Dlist.this.length > position){
        var position_searched_found = position;
        Node beforenodeToDelete = currentNode.previous;
        Node afternodeToDelete = currentNode.next;
        Node deleteNode = currentNode;
        //then connect the before  and after nodes
        beforenodeToDelete= afternodeTodelete.previous;
        afternodeToDelete = beforenodeToDelete.next;
        deleteNode.data = null;
        delete Node.previous = null;
        deleteNode.next = null;

        return deleteNode;
},
 if (Dlist.this.length < position){  //delete at the end.
        var position_searched_found = position;

        Dlist.tail.next = currentNode.previous;
        curretnNode.next = null;
        Node deleteNode=currentNode;
        deleteNode.data = null;
        delete Node.previous = null;
        deleteNode.next=null; //linked list
        },

if (position === 0){  //delete at the begining.
        var position_searched_found = position;
        currentNode.previous = null;
        Dlist.head.previous=currentNode.next;
        Node deleteNode=currentNode;
        deleteNode.data = null;
        delete Node.previous =null;
        deleteNode.next=null;
        }},

var Btree(
         Node LeftChild;
         Node RightChild;
         var count_child_left;
         var count_child_right;
         Btree left_node_ptr;
         Btree right_node_ptr;
  ),
Node LeftChild{

 },
NodeRightChild{

},

//constructors;

Btree btree(){
//properties initialization;
},
Node LeftChild(){
//two different properties initialization;
},

Node RightChild(){
//proprerties initialization;
},


/*
* Singely linkeindlist
*/

var SinglyList(
    var data; //1,2, 3 data fileds.
    var next_link;
),
SinglyList singlylist(){
    data = [];
    next_link=null; //first node.

},
//Node currentNode;
//insert: currentNode.next_link= singleyList;
//SingelyList = Singelylist.next //advances.

//insert at the end
SingelyList.next = currentNode;
//if middle : what data location, currentNode.data <> SingleyList.data :test then insert;
//or search anywhere in the list.

//Delete:
//if middle : what data location, currentNode.data <> SingleyList.data :test then insert;

currentNode.next = null;
Node deleteNode;
deleteNode.data = currentNode.data
deleteNode = currentNode;
SingelyList =- SinglyList.next;

//if delete at the end:

currentNode.next=null;
SingelyList.next=currentNode;
deleteNode=currentNode;
deleteNode.data=null;
deleteNode.next=null;

//delete at the front.(can be , is a data match or if not logic.
currentNode.next=null;
currentNode.data = null;
SingelyList =- SinglyList.next;
//review***
}
callback(currentNode, Singlylist, DblyLsit);  //Overload OO callbacks ...with any domain object as parameter.
]

/*
*Resful API For User access using SIP
*support Vector Machine
*/
/******************************************************************
Here we take advantage of $http that returns  a succes//failure($promise)
a prototype to obtain webpage information for ANY var defined  and does 
a CRUD to store Restful API retrival and CRUD operations

Distribution is prohibited.
Purpose of Main Module:
subscriberValidation [Module()]
CallBack()
Prototype.

Disclaimer: This code willbe modified for conversational,educational & logic 
implementaiton purpose time to Time by Modifier from, company below:

AngularJs, is impelemented using google frameowrk under MIT lisence.
https://en.wikipedia.org/wiki/Category:Software_using_the_MIT_license
Note: Only AngularJs(MIT lisence) language itslef is used no Google framework 
is applied. Protected under International Copyright law @2016.
**********************************************************************
*/

                         angular.module("mainModule", ["ngResource"])
                           .factory("SubscriberService", function ($resource)
                           {
                             // A resource object that can
                             // interact with the RESTful API of the server.
                             var resource = $resource("Subscriber/:operation/:userid",
                               {
                                 userid: new Date();  //alphanumeric system generated token-replace with login controller
                               },
                               {
                                 // A method to update the subscriber address
                                 updateAddress: {
                                   method: "PUT",
                                   isArray: false
                                 }
                               }
                             );

                             // Function to retrieve a subscriberby USERID
                             resource.retrieveSubscriber= function (personUserid) {
                               return this.get(
                                 {
                                   operation: "retrieve",
                                   userid: personUserid
                                 });
                             };

                             // Function to retrieve some Subscriber by USERIDs
                       resource.retrieveSubscriber = function (SubscriberUseridsArray) {
                               return this.query(
                                 {
                                   operation: "retrievearray",
                                   "useridsArray[]": SubscriberUseridsArray
                                 });
                             };

                             // Function to save a subscriberobject
                             resource.storeSubscriber= function (x_person, x_address) {
                               return this.save(
                                 {
                                   operation: "store",
                                   firstName: x_person.firstName,
                                   lastName: x_person.lastName
                                 },
                                 x_address
                               );
                             };

                             // Custom function to delete a subscriberobject by USERID
                             resource.eraseSubscriber= function (personUserid) {
                               return this.delete(
                                 {
                                   operation: "erase",
                                   userid: personUserid
                                 });
                             };

                             // Custom function to update the address of a person
                             resource.updatePersonAddress = function (personUserid, x_address) {
                               return this.updateAddress(
                                 {
                                   operation: "updateaddress",
                                   userid: personUserid
                                 },
                                 x_address
                               );
                             };

                             return resource;
                           })
                           .factory("PersonResource", function ($resource)
                           {
                             // A resource object that can
                             // interact with the RESTful API of the server.
                             var resource = $resource("Subscriber/:operation/:userid",
                               {
                                 userid: "@userid",
                                 firstName: "@firstName",
                                 lastName: "@lastName"
                               },
                               {
                                 // A method to update the address of the
                                 // subscriber
                                 updateAddress: {
                                   method: "PUT",
                                   isArray: false
                                 }
                               }
                             );

                             // A function to retrieve a person
                             resource.prototype.retrieve = function () {
                               return this.$get(
                                 {
                                   operation: "retrieve"
                                 });
                             };

                             // A function to save a subscribr information
                             resource.prototype.store = function () {
                               // Function to Store the current resource instance
                               // to use it later in the handler function.
                               var thisInst = this;

                               // Function is a Callback to the constructor-level
                               // "save" method
                               // because the instance-level "$store" method
                               // doesn't let me pass the (x_)address as raw POST data
                               // but  passes the entire Resource instance as
                               // a JSON object. function will Return the promise 
                               // object like the
                               // instance-level methods of a resource object do.
                               
                               return resource.save(
                                 {
                                   operation: "store",
                                   firstName: this.firstName,
                                   lastName: this.lastName
                                 },
                                 this.x_address,
                                 function (value)
                                 {
                                   // Copy to the resource instance
                                   // all the properties of the object
                                   // returned by the server.
                                   angular.copy(value, thisInst);
                                 }
                               ).$promise;
                             };

                             // Custom function to delete a subscriber
                             resource.prototype.erase = function () {
                               return this.$delete(
                                 {
                                   operation: "erase"
                                 });
                             };

/*
creates a session id -login controller
*/
app.controller("LoginController", ['$http', '$cookies', function($http, $cookies){
    this.credentials = {};
    this.http = $http;

    this.login = function() {

        console.log(this.credentials);
        var authdata = btoa(this.credentials.username + ':' + this.credentials.password);
        $http.defaults.headers.common['Authorization'] = 'Basic ' + authdata;

        console.log($http);
        var res = $http.post("http://API_NAME/library");
        res.success(function(data, status, header){
            alert("Successfull func");
            console.log($cookies.get('JSESSIONID'));
        });
        res.error(function(data, status, headers, config) {
            console.log('Error Log');
        });
    }
}]);
//Set-Cookie:JSESSIONID=azekazEXAMPLErezrzez; Path=/; HttpOnly

