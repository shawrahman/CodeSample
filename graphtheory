/*

PROTOTYPE: 
SATELLITE GUIDED SOLAR 
TRANPORATION SYSTEMS
SPACE TRAVEL
SATELLITE GUIDED
TRAFFIC ,TRANSIT SYSTEMS
AUTOMATED SYSTEMS 
IN COMPLEX NETWORK

Aerovition Digita Inc.
Copyright @2017 , 
WORK IN PROooGRESss
GUIDENCE CONTROL SYSTEM
*/


*Datastructure definition of "-link"
*NETWORK GRAPH DEFINITION & LOGIC
*angularJS, MIT lisneced.
*Subject to change and modification
*/
class Unit {

  // Entity is used as node or edge type, for different classifications
  //    i.e. 'person', 'game', 'road', etc.
  constructor(entity, properties) {

    this.entity = entity + '';

    this.load(properties || {});

  }

  // load properties (id, name, age, etc.) from an object
  load(properties) {

    let p = Object.create(null);

    Object.keys(properties).forEach(function(v) {

      p[v] = properties[v];

    });

    this.properties = p;

    return this;

  }

  set(property, value) {

    return this.properties[property] = value;

  }

  unset(property) {

    return delete this.properties[property];

  }

  has(property) {

    return Object.prototype.hasOwnProperty.call(this.properties, property);

  }

  get(property) {

    return this.properties[property];

  }

  toString() {

    return [this.constructor.name, ' (', this.entity, ' ', JSON.stringify(this.properties) ,')'].join('');

  }

}
/*
*Defintin of ulink
*
*/
class Node extends Unit {

  constructor(entity, properties) {

    super(entity, properties);
    this.edges = [];
    this.inputEdges = [];
    this.outputEdges = [];

  }

  unlink() {

    let edges = this.edges;

    for (let i = 0, len = edges.length; i < len; i++) {
      edges[i].unlink();
    }

    return true;

  }

}

/*
*
Function to include in our Edge that takes care of connecting 
nodes to one another. 
In this edge we hold an inputNode, an outputNode and whether 
or not the edge is a duplex link (bi-directional).
*/
class Edge extends Unit {

  constructor(entity, properties) {

    super(entity, properties);

    this.inputNode = null;
    this.outputNode = null;
    this.duplex = false;

    this.distance = 1;

  }

  // link a specific node in a certain direction
  _linkTo(node, direction) {

    if (direction <= 0) {
      node.inputEdges.push(this);
    }

    if (direction >= 0) {
      node.outputEdges.push(this);
    }

    node.edges.push(this);

    return true;

  }

  // link two nodes, optionally make edge bidirectional (duplex)
  link(inputNode, outputNode, duplex) {

    this.unlink();

    this.inputNode = inputNode;
    this.outputNode = outputNode;
    this.duplex = !!duplex;

    if (duplex) {
      this._linkTo(inputNode, 0);
      this._linkTo(outputNode, 0);
      return this;
    }

    this._linkTo(inputNode, 1);
    this._linkTo(outputNode, -1);
    return this;

  }

  // distance for traversal
  setDistance(v) {
    this.distance = Math.abs(parseFloat(v) || 0);
    return this;
  }

  // weight is 1 / distance
  setWeight(v) {
    this.distance = 1 / Math.abs(parseFloat(v) || 0);
    return this;
  }

  // find the opposite node given a starting node
  oppositeNode(node) {

    if (this.inputNode === node) {
      return this.outputNode;
    } else if (this.outputNode === node) {
      return this.inputNode;
    }

    return;

  }

  // unlink edge, remove connections from nodes
  unlink() {

    let pos;
    let inode = this.inputNode;
    let onode = this.outputNode;

    if (!(inode && onode)) {
      return;
    }

    (pos = inode.edges.indexOf(this)) > -1 && inode.edges.splice(pos, 1);
    (pos = onode.edges.indexOf(this)) > -1 && onode.edges.splice(pos, 1);
    (pos = inode.outputEdges.indexOf(this)) > -1 && inode.outputEdges.splice(pos, 1);
    (pos = onode.inputEdges.indexOf(this)) > -1 && onode.inputEdges.splice(pos, 1);

    if (this.duplex) {

      (pos = inode.inputEdges.indexOf(this)) > -1 && inode.inputEdges.splice(pos, 1);
      (pos = onode.outputEdges.indexOf(this)) > -1 && onode.outputEdges.splice(pos, 1);

    }

    this.inputNode = null;
    this.outputNode = null;

    this.duplex = false;

    return true;

  }

}
/*
*
Re-implementing our Graph
We can now re-implement our “Joe likes Minecraft” graph as follows:
*
*
/
// Create nodes...
let joe = new Node('person');
joe.set('name', 'Joe');

let minecraft = new Node('game');
minecraft.set('name', 'Minecraft');

// Create edge...
let likes = new Edge('likes');

// link 'em!
likes.link(joe, minecraft);

// add more nodes...
let notch = new Node('person', {name: 'Notch'});
let created = new Edge('created').link(notch, minecraft);

/*
*
We added a bit, so the graph now looks something like:
N[Joe] : E[likes] → N[Minecraft] ← E[created] : N[Notch]
We can increase the complexity of our graph (so it isn’t just linear!) as much as we want.
*/

// Add even more nodes
let mojang = new Node('company', {name: 'Mojang'});
let microsoft = new Node('company', {name: 'Microsoft'});
let jennifer = new Node('person', {name: 'Jennifer'});

new Edge('founded').link(notch, mojang);
new Edge('acquired').link(microsoft, mojang);
new Edge('purchased').link(jennifer, minecraft);
new Edge('prints_money_for').link(minecraft, microsoft);

/*

  Our new graph...

                    Jennifer
                       | (purchased)
                       v
  Joe --(likes)--> Minecraft <--(created)-- Notch
    (prints_money_for) |                      | (founded)
                       v                      v
                   Microsoft --(acquired)--> Mojang

*/

/*
*
/*
Mapping User Behavior
Now that we have the basic data structures of our graph set up, 
let’s map our users’ behavior on to a graph. At Storefront,
we have at least three basic ways user can interact with a
listing: they can A) view a listing, B) favorite a 
listing or C) request to book a listing. We’ll use 
these three actions as our edges, and we’ll define 
two node types, user and listing.
We can assemble our graph like so:
*/
let users = getUsers();         // abstract function to get user data (i.e. SQL)
let listings = getListings();   // ... listings
let views = getViews();         // ... etc.
let favorites = getFavorites();
let requests = getRequests();

// quick and dirty O(n) function to get a node by id
function getNodeById(nodes, id) {
  return nodes.filter(function(node) {
    return node.get('id') === id;
  })[0];
}

users = users.map(function(user) {
  return new Node('user', user);
});

listings = listings.map(function(listing) {
  return new Node('listing', listing);
});

views = views.map(function(view) {
  return new Edge('view')
    .link(getNodeById(users, view.user_id), getNodeById(listings, view.listing_id));
});

favorites = favorites.map(function(favorite) {
  return new Edge('favorite')
    .link(getNodeById(users, favorite.user_id), getNodeById(listings, favorite.listing_id));
});

requests = requests.map(function(request) {
  return new Edge('request')
    .link(getNodeById(users, request.user_id), getNodeById(listings, request.listing_id));
});

/*
*
graph is represented entirely in memory (RAM). For 
very large user bases (and large numbers of actions) 
this can be quite a memory hog. You can decrease the 
memory space by grouping all actions of a 
certain type between a user and a listing into a 
single edge, and ignoring users who haven’t performed 
actions on your website.
==
to start giving out recommendations, we need to assign 
weights (or distances) to each of our user behaviors. 
We want more important actions to be weighted more favorably. 
The reason why will become clear when we put everything together. 
“Weight” and “distance” are inverses of each other, with a 
higher weight equating to a lower distance.
We’ll deal with setting distances because they’re easier 
to reason about when traversing graphs. Since requests 
are the most important, we’ll set them to a 
distance of 1, favorites to 2, and views to 4.
*/
views.forEach(function(view) {
  view.setDistance(4);
});

favorites.forEach(function(favorite) {
  favorite.setDistance(2);
});

requests.forEach(function(request) {
  request.setDistance(1);
});

/*
*Final Impelemation
*
*/
let ug = require('ug');

let graph = new ug.Graph();

// fetch data

let users = getUsers();         // abstract function to get user data (i.e. SQL)
let listings = getListings();   // ... listings
let views = getViews();         // ... etc.
let favorites = getFavorites();
let requests = getRequests();

// Add to graph

users.forEach(function(user) {
  graph.createNode('user', user);
});

listings.forEach(function(listing) {
  graph.createNode('listing', listing);
});

views.forEach(function(view) {
  graph.createEdge('view').link(
    graph.nodes('user').find(view.user_id),
    graph.nodes('listing').find(view.listing_id)
  ).setDistance(4);
});

favorites.forEach(function(favorite) {
  graph.createEdge('favorite').link(
    graph.nodes('user').find(favorite.user_id),
    graph.nodes('listing').find(favorite.listing_id)
  ).setDistance(2);
});

requests.forEach(function(request) {
  graph.createEdge('request').link(
    graph.nodes('user').find(request.user_id),
    graph.nodes('listing').find(request.listing_id)
  ).setDistance(1);
});

// save graph
graph.save('/path_to_saved_graph.ugd', function() {
  
  doAfterSave(); // do whatever you'd like.
  
});

/*
*
querying for the 100 closest listings to a user on the graph:
*
*
/
let ug = require('ug');

let graph = new ug.Graph();

// load graph from flatfile into RAM
graph.load('/path_to_saved_graph.ugd', function() {

  // get the closest 100 'listings' nodes, at a minimum depth (distance) of 3
  let results = graph.closest(node, {
    compare: function(node) { return node.entity === 'listing'; },
    minDepth: 3,
    count: 100
  });
  
  // results is now an array of Paths, which are each traces from your starting node to your result node...
  let resultNodes = result.map(function(path) {
    return path.end();
  }));
  
  doSomething(resultNodes); // render, whatever you'd like
  
});
/*
*Explanation to Students:

minDepth in the graph.closest() call is set to 3. 
This is to prevent recommending listings to a 
user that the user has already favorited or 
requested (distances of 1 and 2, respectively). 
A distance of at least 3 guarantees we’ll only 
be recommending listings to users that they’ve 
at least already viewed.
*
*
see:
https://medium.com/@keithwhor/using-graph-theory-to-build-a-simple-recommendation-engine-in-javascript-ec43394b35a3#.mr2xftppb
https://docs.angularjs.org/guide/concepts
https://github.com/keithwhor/UnitGraph
*
*
*/
